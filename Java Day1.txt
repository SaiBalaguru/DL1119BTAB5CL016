Java
1) OOP
2) Secuirity Feature
3) Multi Threaded
4) Robust
5) It uses primitive datatypes also
6) Wrapper ckasses are object counterpoint of primitive datatypes.
7) Static means no instances can be created. The "Main" method is called by JVM.
8) Downcasting - Implicit type conversion (int - float); upcasting - Explicit type conversion (float - int)
9) 

			Source Code (Plain text)               Compilation (javac)
		------------------------
			Byte_code.class (portable code)          Interpretor (java.exe)
		------------------
			JVM (Platform dependent)
		------------------
		    Platform (OS)

10) Comments - // single line ; /* */ multiple lines ; /**   **/ Documentation   

---------------------------------------------------------------------------------------------------------------

Java Day-2
1) There is no multiple Inheritance in Java due to Diamond problem.
2) extends the keyword for Inheritance.
3) Polymorphism - Any instance of subtype can be assigned to the supertype. Through Polymorphism, only overridden methods 
can be accessed and not unique properties.
4) Any subtype can be passed to a supertype.
5) Interface is used to decouple dependent classes.
6) Interfaces cannot be instanciated, that's the reason polymorphism is utilised:
 Interface_Name interface_variable = new Implemented_Class();
7) Abstract class can have one or more methods without implementation, whereas interface is totally abstract.
8) Multiple inheritance is possible with Interfaces and not with abstract classes.
9) For unrelated functiomality use interfaces and for commonalities use Abstract classes.  
--------------------------------

-----------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------

Java Day-3
1) compareTo is in comparable interface! 
2) compareTo has to be written with an algorithm for our preferrable sort for user defined classes.
3) Generics - <> is used for interfaces to specify on which object they will operate.  
4) For Arrays.sort - 
		i) single arguement of some object array - compareTo
		ii) Double arguement should definitely be  - array object, comparator instance/calls the comparator function)
5) Java.util.Vector is a growing array collection. 
6) Enumerator is an old interface and Iterator has been introduced only since Java 5. Iterator can only be used for new 
Collections.
7) Vector is used for multi-threaded environment.  
8) ArrayList has better speed but not good for handling threads.
9) Maps are another collections.
10) HashTable is an older collection than HashMap

--------------------------------------------------------------------------------------------------------------------------

Java Day 4

I/O Streams

1) Binary Streams ->   Input Streams   Output Streams  FileInputStream    FileOutputStream    //Exclusively for Bytes
2) Character Stream -> Reader		Writer 	       FileReader	   FileWriter	
3) File Object - is used for the file Manipulation
4)  InputStream, OutputStream are abstract classes and cannot be instanciated.
5) Serialization - is used tostore the state of the object in a file.
6) Marker Interface - has no methods in them.
7) For Serialization - one should implement Serializable interface - which is a marker interface and 
it will be tell JVM that class has to be serialised.
8) RandomAccessFile is used to access any position in the file
9) JDBC - Java database classes. jdbc JAR is necessaty fot it to run.

-----------------------------------------------------------------------------------------------------------------------------

java day 5

RDBS
1) DBMS can give control access to the data. This maintains secuirity.
2) Atomicity - can either succeed or fail. No other intermediate states.
3) Heirarchical, network, relational & Object models = DBMS Moddels.
4) metadata - info about a particular data. 
5) Multi user accessability is an important feature of DBMS
6) SQL - non procedural language and it's mostly declarative.
7) ACID - Atomicity, Consistency, Isolation/Integrity, Durability
8) Transaction must follow ACID properties.
9) Levels of DB - View , Logical, Physical
10) Schema - logical structure of the database. 
11) Schemas at three levels:
	1) Internal (Physical)
	2) Conceptual (Logical)
	3) External (View)
12) Relation (table) tuple (row) attributes (Column) domain(Range) entity(the data)
13) Codd - the person who laid the rules of database.
14) Key - Primary 
	- Condidate
	- Surrogate - are primary keys that aren't part of the data.
	- Foreign - primary key of one table is used as key for another table.
	- Composite
15) Normalisation - 1NF, 2NF, 3NF
16) Normalisation leads to the formation of many tables.
17) Cardinaliy 1:n, 1:1, n:1, n:n
18) DML = Data manipulation Language
19) DDL = Data definition language
20) DCl = Data Control language
21) Transition control - Commit callback savepoint
22) sql statements are not case sensitive
23) Arithemetic operations are also available
24) || - concat operator
select last_name||' , '||last_name AS "Full Name"
from employees
25) Alternating quoting mechanism
select last_name||q'[it's a name']'|| first_name
AS "Full Name"
from employees;
26) Name starting with a particular letter
select first_name
from employees
where first_name like 'D%'
27) functions always return a value but procedures don't
28) using somw function
select employee_id, concat(first_name, last_name) "NAME",
job_id, Length(last_name),
instr(last_name,'a') "Contains 'a'?"
from employees
where substr(job_id,1,2) = 'AD'
29) rounding off function 
select round(45.923,2),round(45.923,0),round(65.923,-2)
30) Comparing through dates
select last_name,hire_date
from employees
where hire_date<'01-feb-07';
from dual
where substr(job_id,1) = 'A'

31) find the system date
select sysdate from dual
32) Rounding off the date
select round(sysdate,'month') from dual;
select round(sysdate,'year') from dual;
select trunc(sysdate,'year') from dual;
select trunc(sysdate,'month') from dual;

-----------------------------------------------------------------------------------------------------------------------
Day - 5
1) nested functions
		select last_name, upper(concat(substr(last_name,1,8),' US'))
		from employees
		where department_id = 60
2) NVL function - converts null value to zero
select first_name, employee_id, nvl(commission_pct,0)
from employees
3) use NVL along witha where clause - for a particular job_id
 select first_name, employee_id, job_id , nvl(commission_pct*10,0),((salary*12)+(salary*12*nvl(commission_pct*10,0))) AN_SAL
from employees
where instr(job_id,'CLERK',3) > 0
4) nvl2
select last_name, salary, commission_pct, nvl2(commission_pct, 'SAL+COM','SAL') income 
from employees
where department_id IN (50,80);
5) nullif function
select first_name, LENGTH(first_name) "expr1",
last_name,LENGTH(last_name) "expr2", nullif(LENGTH(first_name), LENGTH(last_name)) ressult 
from employees; 
6) Coalesce function - returns null when specified
select last_name,manager_id,commission_pct, coalesce(commission_pct,manager_id,-1) comm
from employees
order by commission_pct;
7) case Expression:

select last_name, job_id, salary,
case job_id when 'IT_PROG' then 10*salary
            when 'ST_CLERK' then 20*salary
            when 'SA_REP' then  15*salary
else        salary end "Revised Salary"
from employees
8) Decode function: 
select last_name, job_id,department_id, salary,
DECODE(department_id, 30, 10*salary,
                      50, 20*salary,
                      80, 5*salary, salary)
                    Revised_salary
from employees;
9) select last_name, salary,
DECODE (trunc(salary/2000, 0), 0, 0.00,
                               1, 0.09,
                               2, 0.20,
                               3, 0.30,
                               4, 0.40,
                               5, 0.42,
                               6, 0.44,
                                  0.45) TAX_RATE
from employees
where department_id = 80;


10) stddev function
'select  trunc(STDDEV(salary)) "STANDARD DEVIATION" 
from employees
11) count number of employees in each department
select department_id, count(employee_id)
11) on statement 
select e.employee_id, e.last_name, e.department_id,d.department_id
from employees e join departments d
on (e.department_id = d.department_id);
12) using ON, join 
select employee_id, city, department_name
from employees e
join departments d
on d.department_id = e.department_id
join locations l
on  d.location_id = l.location_id
AND l.city = 'Seattle'
from employees

13) select outer.last_name, outer.department_id
from employees outer 
where  exists
(select 'X' from employees 
where department_id = outer.department_id
and hire_date > outer.hire_date
AND salary > outer.salary);
14) select e.employee_id,e.last_name, e.department_id, d.department_name
from employees e  join departments d 
on d.department_name in (select department_name from departments d where d.department_id = e.department_id)

(or)

select employee_id, last_name,
(select department_name from departments d where e.department_id = d.department_id) department
from employees e
order by department


13) Chronounits, LocalDate, DateTimeFormatter are used for finding, parsing dates.
group by department_id
14) cartesian product is when join is invalid
15) 1) Enclose subqueries in parenthesis.
16) select last_name, job_id, salary
from employees
where job_id = (select job_id from employees where employee_id = 141)
AND salary < (select salary from employees where employee_id = 143);
17) select last_name, job_id, salary
from employees 
where salary < (select avg(salary) from employees);
18) multirow comparison operato- in, any, all
19) use of any 
select last_name, employee_id,job_id,salary
from employees
where salary < ANY (select salary from employees where job_id = 'IT_PROG')
AND job_id<>'IT_PROG'
20) select department_name,sum(salary)
from departments join employees  using (department_id)
group by department_name 
having sum(salary)>(1/8)*(select sum(salary) from employees);

----------------------------------------------------------------------------------------------------------------------
Day 8
1) Union operation - without duplication.
select employee_id, job_id
from employees
union
select employee_id, job_id
from job_history;

2) Union all  - without duplication
select employee_id, job_id
from employees
union All
select employee_id, job_id
from job_history
order by employee_id;
3) intersect operator
select employee_id, job_id
from employees
intersect
select employee_id, job_id
from job_history
order by employee_id;

4) minus opeartor 
select employee_id, job_id
from employees
minus
select employee_id, job_id
from job_history
order by employee_id;

5) select last_name,employee_id,department_id, to_number(null)location, hire_date, to_char(null)
from employees
union 
select to_char(null),to_number(null),department_id, location_id, to_date(null), department_name
from departments
order by department_id;

6) use of column noprint
 column a_dummy NOPRINT
select 'sing' AS "My DREAM", 3 a_dummy
from dual
union
select 'I''d like to teach',1 a_dummy
from dual
union
select 'the world to', 2 a_dummy
from dual
order by a_dummy

7) data Manipulation Language - DML
8) Insert a new row
insert into  departments(department_id,department_name, manager_id, location_id)
values(71,'Public Relations',100,1700);
8) insert a row
insert into employees(employee_id,first_name,last_name,email,phone_number,hire_date,job_id,salary,
commission_pct,manager_id,department_id)
values(237,'John','banks','JBS','1234567',sysdate,'AC_ACCOUNT',6900,null,205,71);
select * from employees;
9) Insert with user arguements
insert into departments
(department_id,department_name,location_id)
values (&department_id, '&department_name',&location);
10) update a row
update employees
set department_id =  70
where employee_id = 113;
11) Updating using subquery
update employees
set job_id = (select job_id
              from employees
                where employee_id = 205),
    salary = (select salary
                from employees
                where employee_id = 205)
where employee_id = 114;
select * from employees
12) delete rows based on another table
delete from employees
where department_id = (select department_id
                        from employees
                        where department_id = 71 );
select * from employees;
13) delete from employees 
where department_id =
(select department_id 
from departments 
where location_id =
(select location_id 
from locations
where city = 'Hyderabad'));
14) SAVEPOINT * ROLLBACK TO
    update locations 
    set city = 'Chennai'
    where city = 'Hyderabad';
    SAVEPOINT CityUpdate;
    insert into locations(location_id,Street_address,postal_code,city,state_province,country_id)
    values(3456,to_char(null),400004,nagpur,to_char(null),30);
    ROLLBACK TO CityUpdate;
15) after commit all savepoints are deleted.

14) DDL - data definition language - cannot be undone as easily as DML
15) Insert into with a subquery
insert into
(select employee_id, last_name,email,hire_date,job_id,salary,department_id
from employees
where department_id = 50)
values(99999,'taylor','Dtaylor',to_date('07-jun-99','DD-MON-RR'),'ST_CLERK',5000,50);
16) DD-MON-RR - RR is for the century format
17) Datatypes of the table
varchar2, char, number(p,s), date, long, clob, raw & long raw ...
18) creating a table
create  TABLE dept
(deptno number(2),
dname varchar2(14),
loc varchar2(13),
create_date DATE DEFAULT sysdate);
describe dept;



program
-------------------------------------------------------------------------------------------


 create table roles
(role_id number(6) constraint role_role_id Primary key,
role_name varchar2(14) constraint role_role_name unique); 

create table Users
(id number(4) constraint user_id PRIMARY KEY,
 last_name varchar2(14),
user_name varchar2(20) constraint user_username UNIQUE 
                        constraint user_username_nn not null,
pass_word varchar2(20) CONSTRAINT check_password CHECK (length(pass_word)>8),
e_mail varchar2(20) constraint users_email UNIQUE 
                    constraint  users_email_nn not null,
role_id number(6),
constraint users_role_id FOREIGN key(role_id)REFERENCES ROLES(ROLE_ID)); 

insert into USERS(ID,LAST_NAME,USER_NAME,PASS_WORD,E_MAIL,ROLE_ID,mobile_num)
VALUES(1004,'Rita','Rita1004','123456789','Rita10004',20,12345678890);


------------------------------------------------------------------------------------------------

19) Views are made out of other tables witha certain where clause.
create or replace view empvu80
(id_number, name, sal,department_id)
as select employee_id, first_name || ' ' || last_name, salary, department_id
from employees 
where department_id = 80;
20) create or replace view empvu20
as select *
from employees 
where department_id = 20;
with check option constraint empvu20_ck;
select * from empvu20;
21) with read only - so that dml operations are not used
create or replace view empvu10
(employee_number, employee_name,job_title)
as select employee_id, last_name, job_id
from employees 
where department_id = 20
with read only;
22) Creating index -  it's used to loop through the data faster. all primary keys are by definition indexes.
create index ind
on users(last_name);

23) create or replace view usersview
(id, name,user_name)
as select ID,last_name,user_name from users;
create synonym u_sum
for userview;

24) to find the objects created by the user: 
select object_name, object_type, status
from user_objects
order by object_type;

25) user defined tables
select table_name
from user_tables;

26) To find the column properties
select column_name, data_type, data_length, data_precision, data_scale, nullable
from user_tab_columns
where table_name = 'EMPLOYEES'
27) Info about constraints
select constraint_name, constraint_type, search_condition, r_constraint_name, delete_rule, status
from user_constraints
where table_name = 'EMPLOYEES'

also

select constraint_name, column_name
from user_cons_columns
where table_name = 'USERS'

28) Info regarding views
/*select DISTINCT view_name from user_views;*/
select text from user_views
where view_name = 'EMPVU20' // user defined view

29) To print info regarding the user defined sequences
select sequence_name, min_value, max_value, increment_by, last_number
from  user_sequences;
 
30) creating a complex view
create or replace view dept_sum_vu
(name, minsal,maxsal,avgsal)
as select d.department_name, min(e.salary),max(e.salary),avg(e.salary)
from employees e join departments d
on (e.employee_id = d.department_id)
group by d.department_name;
select * from dept_sum_vu;
--------------------------------------------------------------------------------------------------------

Day 9

	PL/SQL
1) sammple program
set serveroutput on;
DECLARE
message VARCHAR2(20):= 'Hello World!';
a number:=10;
BEGIN 
a:=a+1;
dbms_output.put_line(message);
dbms_output.put_line(a);
END;
/
2) IF condition
set serveroutput on;
DECLARE
a number:=1;

BEGIN
if mod(a,2) = 0 then
dbms_output.put_line(a);
else 
dbms_output.put_line(a+1);
END iF;
END;
/
3) looping statement in PL SQL
set serveroutput on;
Declare 
i number:=1;
begin
loop 
insert into T1 values(i,i);
i:=i+1;
exit when i>100;
end loop;
end;
/
select * from T1;
4) for loop
set serveroutput on;
Declare 
i number:=1;
n number;
begin
for n in 1..100 loop 
insert into T1 values(i,i+2);
i:=i+1;
end loop;
end;
/
select * from T1;
5) Use case statement
set serveroutput on;
Declare 
n_pct employees.commission_pct%TYPE;
v_eval varchar2(10);
n_emp_id employees.employee_id%TYPE:=145;
BEGIN
select commission_pct
into n_pct
from employees
where employee_id = n_emp_id;
case n_pct
when 0 then 
v_eval:='N/A';
WHEN 0.1 THEN
v_eval:='LOW';
when 0.4 then
v_eval:='HIGH';
else
v_eval:='FAIR';
end case;
dbms_output.put_line('EMPLOYEE '|| n_emp_id || 'Commission ' || to_char(n_pct)||
'which is ' || v_eval);
END;
/


6) get roll name with given user last_name
/*select role_name from roles where role_id = (select role_id from users where last_name = 'Ram');*/
set serveroutput on;
Declare 
u_name users.last_name%TYPE:='Rahim';
u_role varchar2(20);
u_id users.id%TYPE;
e_eval varchar2(20);
BEGIN
select role_id into u_id from users where last_name = u_name;
select role_name
into u_role
from roles
where role_id = u_id;

case u_role
when 'MNG' then 
e_eval:='Manager';
WHEN 'ASST_MNG' THEN
e_eval:='Assistant manager';
when 'ENG' then
e_eval:='Engineer';
else
e_eval:='Assistant Engineer';
end case;
dbms_output.put_line('User: '|| u_name || ' -  Role is ' || e_eval);
END;
/
7) Assigning the tax to a particulaar salary.
--select * from tax;
SET SERVEROUTPUT ON SIZE 1000000;
<<parent>>
DECLARE
  emp_name tax.last_name%TYPE:='&name1';
  v_eval   varchar2(10);
  emp_gross tax.salary%TYPE;
BEGIN

  SELECT salary
  INTO emp_gross
  FROM tax
  WHERE last_name = emp_name;
 
  -- evalutate commission percentage
  CASE
    WHEN emp_gross<20000 THEN
      v_eval := 0.1*emp_gross;
    WHEN 20000<=emp_gross and emp_gross<40000  THEN
      v_eval := 0.2*emp_gross;
    WHEN 40000<=emp_gross THEN
      v_eval := 0.3*emp_gross;
    ELSE
      v_eval := 'Invalid';
  END CASE;
  -- print commission evaluation
  DBMS_OUTPUT.PUT_LINE('Employee ' || emp_name || 
                       ' taxes = ' || v_eval ||
                      ' on gross '   || emp_gross);

END;
/

8) Using nested begin
set serveroutput ON size 1000000000;
<<parent>>
declare 
n_emp_id employees.employee_id%TYPE:=&emp_id1;
Begin 
<<child>>
declare 
n_emp_id employees.employee_id%type:=&emmp_id2;
v_name employees.first_name%type;
begin 
select first_name
into v_name
from employees
where employee_id = parent.n_emp_id;
dbms_output.put_line('First name of employee ' || parent.n_emp_id || ' is ' || child.v_name);
exception
when no_data_found then
dbms_output.put_line('Employee '|| parent.n_emp_id || ' not found');
end;
end;
/


9) Use cursor as an iterator in PL SQL
SET SERVEROUTPUT ON SIZE 1000000;
DECLARE
  -- declare a cursor
  CURSOR cur_chief IS
      SELECT first_name,
             last_name,
             department_name
      FROM employees e
      INNER JOIN departments d ON d.manager_id = e.employee_id;
 
  r_chief cur_chief%ROWTYPE;
BEGIN
  OPEN cur_chief;
  LOOP
    -- fetch information from cursor into record
    FETCH cur_chief INTO r_chief;

    EXIT WHEN cur_chief%NOTFOUND;
 
    -- print department - chief
    DBMS_OUTPUT.PUT_LINE(r_chief.department_name || ' - ' ||
                         r_chief.first_name || ',' ||
                         r_chief.last_name);
  END LOOP;
  -- close cursor cur_chief
  CLOSE cur_chief;
END;
/

10) swapping the numbers uing cursor

--truncate table t1;
--set serveroutput on;
--Declare 
--i number:=1;
--n number;
--begin
--for n in 1..100 loop 
--insert into T1 values(i,i+1);
--i:=i+1;
--end loop;
--end;
--/
--cl scr;

SET SERVEROUTPUT ON SIZE 1000000;
DECLARE
  -- declare a cursor
  a number;
  b number;
  CURSOR cur_chief IS
  select num_a, num_b
  from T1
  for update;
  Begin
  open cur_chief;
  loop
  fetch cur_chief into a,b;
  exit when cur_chief%notfound;
  delete from T1 where current of cur_chief;
  insert into T1 values(b,a);
  end loop;
  close cur_chief;
  end;
  /
  select * from T1;

11) Find the employees with hire_date>2005

cl scr;
SET SERVEROUTPUT ON SIZE 1000000;
DECLARE
e_name employees.last_name%type;
h_date employees.hire_date%type;
salary employees.salary%type;
tempsal employees.salary%type;
  -- declare a cursor
  CURSOR cur_chief IS
  select last_name, hire_date,salary
  from employees
  where hire_date > '31-DEC-2005';
  Begin
     DBMS_OUTPUT.PUT_LINE('Name     hire Date    old salary      new salary ');
  open cur_chief;
  loop
  fetch cur_chief into e_name,h_date,salary;
  exit when cur_chief%NOTFOUND;
  tempsal:=salary;
  DBMS_OUTPUT.PUT_LINE(e_name ||'  ,  '||h_date ||'  ,  '||salary||' ,   '||tempsal);
  end loop;
  close cur_chief;
  end;
  /
  

12) Find the most & least experienced person in the company:
cl scr;
SET SERVEROUTPUT ON SIZE 1000000;
DECLARE
e_name employees.last_name%type;
h_date employees.hire_date%type;
  -- declare a cursor
  CURSOR cur_chief IS
    select last_name, hire_date
from (
SELECT last_name, hire_date
from employees
order by hire_date asc)
where ROWNUM<=1;
CURSOR cur_chief1 IS
    select last_name, hire_date
from (
SELECT last_name, hire_date
from employees
order by hire_date desc)
where ROWNUM<=1;
  Begin
  open cur_chief;
  fetch cur_chief into e_name,h_date;
  DBMS_OUTPUT.PUT_LINE(e_name||' '||h_date);
  close cur_chief;
  open cur_chief1;
  fetch cur_chief1 into e_name,h_date;
  DBMS_OUTPUT.PUT_LINE(e_name||' '||h_date);
  close cur_chief1;
  end;
  /


13) Create recods in pl sql
SET SERVEROUTPUT ON SIZE 1000000;
DECLARE
  r_emp employees%ROWTYPE;
  n_emp_id  employees.employee_id%TYPE := 200;
BEGIN
  SELECT *
  INTO r_emp
  FROM employees
  WHERE employee_id = n_emp_id;
  -- print out the employee's first name
  DBMS_OUTPUT.PUT_LINE(r_emp.first_name);
END;
/
14) Create records and loop through using cursor
cl scr;
SET SERVEROUTPUT ON SIZE 1000000;
DECLARE
  type u_rec is RECORD(
    name users.last_name%TYPE,
    role roles.role_name%type
  );
  u_rec1 u_rec;
  cursor cur_chief is
  select u.last_name, r.role_name
  from users u join roles r 
  on u.role_id = r.role_id;
  
BEGIN
 open cur_chief;
   loop
   fetch cur_chief into u_rec1;
   exit when cur_chief%notfound;
  dbms_output.put_line(u_rec1.name||'  '||u_rec1.role);
  end loop;
  close cur_chief;
END;
/

15) Assign another record to a record.

 cl scr;
SET serveroutput ON SIZE 1000000;
DECLARE
  TYPE t_name IS RECORD(
    first_name employees.first_name%TYPE,
    last_name employees.last_name%TYPE
  );
  r_name      t_name;
  r_name2     t_name;
  r_name_null t_name;
  n_emp_id employees.employee_id%TYPE := 200;
BEGIN
  -- assign employee's infomation to record
  SELECT first_name,
         last_name
  INTO r_name
  FROM employees
  WHERE employee_id = n_emp_id;
 
  -- assign record to another record
  r_name2 := r_name;
  -- print out the employee's name
  DBMS_OUTPUT.PUT_LINE(r_name2.first_name || ',' || r_name2.last_name);
 
  -- assign record to NULL
  r_name2 := r_name_null; 
 
  -- check NULL for each individual field
  IF r_name2.first_name IS NULL AND
     r_name2.last_name IS NULL THEN
    DBMS_OUTPUT.PUT_LINE('Record r_name2 is NULL');
  END IF;
 
END;
/
16) joining three tables
select employee_id,last_name,salary,department_name,department_id,city 
from 
(select department_name,department_id, city 
from departments d join locations l 
on d.location_id = l.location_id)k
join employees e
USING (department_id)
order by e.employee_id asc;


17) Joining Employees, departments, locations using records and printing them.

cl scr;
SET SERVEROUTPUT ON SIZE 1000000;
DECLARE
  type e_rec is RECORD(
  id employees.employee_id%type,
  name employees.last_name%TYPE,
  salary employees.salary%TYPE
  );
  type d_rec is RECORD(
  d_name departments.department_name%TYPE,
  d_id departments.department_id%type
  );
  type l_rec is RECORD(
  city locations.city%type
  );
  type comp_rec is RECORD(
  e e_rec,
  d d_rec,
  l l_rec);
  comp comp_rec;
  cursor cur_chief is
  select employee_id,last_name,salary,department_name,department_id,city 
from 
(select department_name,department_id, city 
from departments d join locations l 
on d.location_id = l.location_id)k
join employees e
USING (department_id)
order by e.employee_id asc;

BEGIN 
open cur_chief;
loop
fetch cur_chief into comp.e.id,comp.e.name,comp.e.salary,comp.d.d_name,comp.d.d_id,comp.l.city;
exit when cur_chief%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(comp.e.id||'                   '||comp.e.name||'                   '||comp.e.salary||'                 '||comp.d.d_name||'                 '||comp.d.d_id||'                   '||comp.l.city);
end loop;
close cur_chief;
end;
/


--------------------------------------------------------------------------------------------------------------------


Day - 10
1) Handling exceptions in pl sql
DECLARE
    l_name customers.NAME%TYPE;
    l_customer_id customers.customer_id%TYPE := &customer_id;
BEGIN
    -- get the customer
    SELECT NAME INTO l_name
    FROM customers
    WHERE customer_id = l_customer_id;
    
    -- show the customer name   
    dbms_output.put_line('customer name is ' || l_name);
 
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('Customer ' || l_customer_id ||  ' does not exist');
END;
/

2) Handling more than one exception
cl scr;
set serveroutput on size 1000000000;
DECLARE
    l_name employees.last_name%TYPE;
    l_id employees.employee_id%TYPE := &employee_id;
BEGIN
    -- get the customer
    SELECT last_name INTO l_name
    FROM employees
    WHERE employee_id <= l_id;
    
    -- show the customer name   
    dbms_output.put_line('customer name is ' || l_name);
 
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('Employee ' || l_id ||  ' does not exist');
        when too_many_rows then 
        DBMS_OUTPUT.PUT_LINE('Tow many rows');
END;
/

3) Salary exception 

cl scr;
set serveroutput on;
declare 
salary_too_high exception;
pragma exception_init(salary_too_high, -20007);
salary number(20):=&salary;
e_name employees.last_name%TYPE;
e_id number(20);
max_sal number(20);


Begin
select e.employee_id,last_name,j.max_salary
into e_id, e_name,max_sal
from employees e join jobs j 
on e.job_id =j.job_id
where e.employee_id = &id;
if salary>max_sal then 
raise salary_too_high;
--else 
--update employees
--set salary = 
end if;
exception 
when salary_too_high then 
dbms_output.put_line('Salary is greater than '||max_sal);
end;
/

4) declare procedure & use it: 

cl scr;
set serveroutput on;
create or replace 
procedure square (N int) is
begin 
dbms_output.put_line('The square of the number is: '||N*N);
END;
/
begin
 square(&N);
end;

5) Another example 4

cl scr;
set SERVEROUTPUT ON;
create or replace 
procedure findNameSalary(ID int) is
e_name employees.last_name%type;
e_sal employees.salary%type;
begin 
select last_name, salary 
into e_name,e_sal
from employees
where employee_id = ID;
dbms_output.put_line(e_name||' - '||e_sal);
end;
/
begin 
findNameSalary(&ID); 
end;


6) use out in a procedure

cl scr;
set serveroutput on;
create or replace 
procedure sum_ab(a int, b int, c out int) is
begin
c:= a+ b;
end;
/
declare
c int;
begin 
sum_ab(&a,&b,c);
dbms_output.put_line('The sum is: '||c);
end;
/

7) Another example for 6)

cl scr;
set SERVEROUTPUT ON;
create or replace
procedure findName(ID number, name out VARCHAR2)  is
begin
select last_name
into name
from employees
where employee_id = ID;
end;
/
declare 
name VARCHAR2(20);
begin
findName(&ID,name);
dbms_output.put_line('The name of the person is: '||name);
end;


8) Functions in PL SQl

create or replace 
function add_two(A int, B int)
return int is
Begin 
return(A+B);
end;
/
begin 
dbms_output.put_line(add_two(1,2));
end;

9) Another example for functions

cl scr;
set serveroutput on;
create or replace 
function totSalary return int is
s_sum number;
begin
select sum(salary)
into s_sum
from employees;
return s_sum;
end;
/
begin 
DBMS_OUTPUT.PUT_LINE('The total salary is: '||totSalary());
end;

10) increment salary using functions using pl sql
cl scr;
set SERVEROUTPUT ON;
create or replace 
function incSal(ID int) return int is
sal number;
e_name varchar2(20);
begin
select salary,last_name
into sal,e_name 
from employees
where employee_id = ID;
DBMS_OUTPUT.PUT_LINE('Employee Name: '||e_name||'; Old Salary: '||sal);
sal:=sal+100;
return sal;
end;
/
begin 
DBMS_OUTPUT.PUT_line('The incremented salary is: '||incSal(100));
end;
/

11) Declare a trigger and use it!

CREATE TABLE audits (
      audit_id         NUMBER constraint audit_id_pk PRIMARY KEY,
      table_name       VARCHAR2(255),
      transaction_name VARCHAR2(10),
      by_user          VARCHAR2(30),
      transaction_date DATE
);
set SERVEROUT on;

CREATE OR REPLACE TRIGGER customers_audit_trg
    AFTER 
    UPDATE OR DELETE 
    ON users
    FOR EACH ROW    
DECLARE
   l_transaction VARCHAR2(10);
BEGIN
   -- determine the transaction type
   l_transaction := CASE  
         WHEN UPDATING THEN 'UPDATE'
         WHEN DELETING THEN 'DELETE'
   END;
 
   -- insert a row into the audit table   
   INSERT INTO audits (audit_id,table_name, transaction_name, by_user, transaction_date)
   VALUES(USERS_SQ.nextval,'USERS', l_transaction, USER, SYSDATE);
END;
/
update users
set pass_word = '123456901'
where id = 1000;
--after updating check the audit table;


----------------------------------------------------------------------------------------------------------

PYTHON Jan 6th 2020

1) REPL - real eval print loop
2) All are objects in Python
3) # - comments in python
4) help(funcname) - to know about the functionalities
5) No characters in Python
6) Multiple assignments:- a,b,c = 67, 34.34,"hi"
7) Strings can be multiplied
8) a = hello, b = hi; a + b*2 >> hellohihi
9) c = 5; c//3 - returns int value of the quotient. This is called as floor division
10) raise to the power - **
11) String indexing
b  a  t  m  a  n
0  1  2  3  4  5
-6 -5 -4 -3 -2 -1

12) Slicing in String
a = "String"
a[0:3] = 'str'
13) a[2:-2] = 'rin'
14) Slicing will not give index out of bound error
15) String modofication is not possible -> Strings are immutable
16) id(var) = gives storagelocation in python.
17) sorted(varname) - for sorting
18) Lists are mutable
19) listname.append() - appends an entire a list 
20) listname.extend(listname1) - adds each element of listname1 to listname.
21) """ / ''' - are used for including new line in the string
22) a = 
""" hello
how are you """
23) """ - document string .



PYTHON Jan 7th 2020

1) stra  = "hello"
2) list(stra)  >> 'h','e','l','l','o' // converts into char array
3) in, not in  - are membership operators
4) In python mostly the upper bound is not included.
5) traditional in for loop -> 
for i in range(0,n)
print(lista)
6) another way is to provide incremental value:
 
for(start.end,increment_by)
print(value)

7) There can be an else to "for" & "while" statements also! 
8) "pass" - it does not do anything more like a comment.
9) def - is used for defining a function! 
10) print everything in the same line: print(i,end="") - doesnt print a new line.
11) list in between parathesis is caled tuple - it's immmutable.
12) Documentation String must be the first line of the function.
13) inner functions are possible in Python
14) for multople arguements  - *args    //args is just another variable and it's a tuple!
15) Decorators
	1) FUnctions that take other functions as arguements - higher order functions
	2) THERECAN BE A LIST functions.

16) global keyword for global variables.
17) nonlocal is another keyword for variables.
18) Sets are enclosed in {}
19) They don't duplicate.
20) In jupyter it gets ordered automatically.
21) Sets are mutable but should contain only  immutable types. So sets cannot be nested. 
22) There's no indexing, slicing
23)  Sets allow to pop.
24) Maps
	1) Duplicate values but no duplicate keys
	2) They are unordered but can be indexed.
	3) keys must be immutable
	4) values can be anything
	5) Maps are mutable.
	6) some important functions are: dict.keys(),dict.values(),dict.items()

25) In every function: uncountable key-value pairs are sent as: **kvargs

--------------------------------------------------------------------------------------------------------------------

PYTHON JAN 8th 2020

1) import - is used for accessing the modules.
2) OS module - is used for accessing the file system.
3) The recusrionlimit is 3000.
4) to reload a module - import importlib ; importlib.(package_name)
5) When we import a particular feature from a module. The entire module gets a copied into
 the RTE but access is restricted. Hence any print statment of the module woll be executed irrespectively.
6) The instance of a class will point to the class as long as the object's members/attributes are given an additional
assignment declaration outside the class.
7) In calling the function of a class:
	1) The function definition should always contain an argument since:
	class class_name:
	class_func()  #inside class


	obja # object for the above class 
	obja.class_func() # is translated class_name.class_func(obja)

hence class_func declaration should be class_func(self)


8) There's no constructor in Python classes
9) __init__() get's called automatically when an object is informed.


10) Here for private data members?functions we use __ (double underscore) it cannot 
be accessed outside the class.
11) Multiple Inheritance is possible in Python by giving prefernce to the first inheriting class.
12) Operator Overloading is possible in Python!
13) magic functions are used for Opeerator overloading.

---------------------------------------------------------------------------------------------------------------------

Jan 9th 2020
File Handling in Python

1) Three files that open for any PL - stdin,stdout,stderr
  	fa - let it be a file object
  	fa.open()
	fa.seek(i) - returns position i 
	fa.tell() - tells where is the cursor in the file
	fa.close() - close the file.
	fa.readline() = reads every line
	r - read
	w - write
	a - append
	fa.close() - check whether it's closed! 
	fa.truncate() - will delete the contents of the file
	fa.readable - whether it's readable - returns a bool
	fa.writable - whether it's writable - returns a bool.

2) str.split() - splits the string based on white space. This returns a list.
3) str.split('\n' - split a string a newline
4) to sort a string based on the lowercase - sorted(list,key = str.lower)
5) another way of opening file and the coder need not worry about closing.

1) eval() - This evaluates the statement inside it.
2) For getting input - we use input(). This always returns the user input as String.
  Hence for type conversion, we use eval(input())! 
3) eval() - input() returns only Strings
	    for eval(), the input has to be specified to be string with " "

4) For Exception handlling - keywords - try: , except exception_name:  , raise exception_name
5) The unspecified except should always be below all the specified except.
6)  Inner catch/ except can't handle then outer catch/except can handle.
7) There's a else to try: block also. It get's executed only if no exception is raised.
8) Finally will execute irrespective o0f what happens in the try block.

	with open("filename.txt") as fc:
		vara = fc.read() 

---------------------------------------------------------------------------------------------------------------------------------------------------------------

jan 10th 2020
1) map(funcname,list) - funcname() will work on each element of list and return the entire operated list.

eg: 
def squaoref(a):
	return a*a
lista = [1,2,3,4]
print(map(squaref,lista))
# returns square of each value.

2) filter(funcname,listc) - will pick certain elements of listc based on the algorithm in funcname()
3) lambda functions can have only single line of execution and should return a single value.
4) lambda can have multiple inputs but the functionality can be only one.
lista = [2,3,4,5]
listb = list(filter(lambda x: bool(x%2==0),lista))
5) All user defined exceptions must be a child of class Exception  
6) So an empty class temp inherits the Exception class. rest all exception should inherit that temp. 

---------------------------------------------------------------------------------------------------------------------------

Jan 13th 2020

	SQL with Python
1) Here we use SQLite as the database.
2) The steps to link:
	i) Import Library
	2) create a connection
	3) Cursor Object
	4) write queries
3) import sqlite3
4) con = sqlite3.connect('db_name')
5) cur = con.cursor()
6) In Python, sql statements need not be written in try & catch block


Linking iwth Microsoft Excel
1) Use openpyxl,pandas
2) workbook is a property in openpyxl
3) Pandas are also used to access and work with sql, excel .

-------------------------------------------------------------------------------------------------------------------------------
